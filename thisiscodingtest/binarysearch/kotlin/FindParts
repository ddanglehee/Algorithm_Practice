class FindParts {
    fun solution1() {
        val br = System.`in`.bufferedReader()
        val n = br.readLine().toInt()
        val storeParts = br.readLine().split(" ").map { it.toInt() }.toMutableList()
        val m = br.readLine().toInt()
        val customerRequest = br.readLine().split(" ").map { it.toInt() }

        storeParts.sort()

        customerRequest.forEach { parts ->
            print("${isPartsInStore(storeParts, parts)} ")
        }
    }

    // 집합 자료형 사용 풀이
    fun solution2() {
        val br = System.`in`.bufferedReader()
        val n = br.readLine().toInt()
        val storeParts = br.readLine().split(" ").map { it.toInt() }.toSet()
        val m = br.readLine().toInt()
        val customerRequest = br.readLine().split(" ").map { it.toInt() }

        customerRequest.forEach { parts ->
            if (parts in storeParts) {
                print("yes ")
            } else {
                print("no ")
            }
        }
    }

    // 계수 정렬 사용 풀이
    fun solution3() {
        val partsList = MutableList(1000001) { 0 }

        val br = System.`in`.bufferedReader()
        val n = br.readLine().toInt()
        val storeParts = br.readLine().split(" ").map { it.toInt() }.forEach { partsList[it]++ }
        val m = br.readLine().toInt()
        val customerRequest = br.readLine().split(" ").map { it.toInt() }

        customerRequest.forEach {
            if (partsList[it] == 1) {
                print("yes ")
            } else {
                print("no ")
            }
        }
    }

    fun isPartsInStore(list: List<Int>, target: Int): String {
        var start = 0
        var end = list.lastIndex

        while (start <= end) {
            val mid = (start + end) / 2

            when {
                target < list[mid] -> end = mid - 1
                target == list[mid] -> return "yes"
                else -> start = mid + 1
            }
        }

        return "no"
    }
}